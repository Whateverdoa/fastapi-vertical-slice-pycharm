.PHONY: help install dev-install services-up services-down dev-local test format lint clean docker-full

# Default target
help: ## Show this help message
	@echo "FastAPI Vertical Slice - PyCharm Edition"
	@echo "========================================"
	@awk 'BEGIN {FS = ":.*##"; printf "\nUsage:\n  make \033[36m<target>\033[0m\n"} /^[a-zA-Z_-]+:.*?##/ { printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) } ' $(MAKEFILE_LIST)

##@ Setup
install: ## Install dependencies with uv
	uv pip install -e .

dev-install: ## Install development dependencies
	uv pip install -e ".[dev]"
	pre-commit install

##@ Development (PyCharm Workflow)
services-up: ## Start only Docker services (PostgreSQL, Redis)
	docker-compose -f docker-compose.services.yml up -d
	@echo "‚úÖ Services started. Use PyCharm 'FastAPI Dev Server' to run the app locally."

services-down: ## Stop Docker services
	docker-compose -f docker-compose.services.yml down

services-logs: ## Show services logs
	docker-compose -f docker-compose.services.yml logs -f

dev-local: ## Run FastAPI app locally (alternative to PyCharm run config)
	PYTHONPATH=src uvicorn src.main:app --reload --host 0.0.0.0 --port 8000

##@ Database
db-upgrade: ## Run database migrations
	PYTHONPATH=src alembic upgrade head

db-downgrade: ## Rollback last migration
	PYTHONPATH=src alembic downgrade -1

db-migration: ## Create new migration (make db-migration msg="Your message")
	PYTHONPATH=src alembic revision --autogenerate -m "$(msg)"

db-reset: ## Reset database (WARNING: Destroys all data)
	docker-compose -f docker-compose.services.yml down -v
	docker-compose -f docker-compose.services.yml up -d postgres
	sleep 5
	make db-upgrade

##@ Testing
test: ## Run tests with pytest
	PYTHONPATH=src pytest

test-cov: ## Run tests with coverage report
	PYTHONPATH=src pytest --cov=src --cov-report=html --cov-report=term-missing

test-unit: ## Run only unit tests
	PYTHONPATH=src pytest -m unit

test-integration: ## Run only integration tests
	PYTHONPATH=src pytest -m integration

test-e2e: ## Run end-to-end tests
	PYTHONPATH=src pytest -m e2e

test-watch: ## Run tests in watch mode
	PYTHONPATH=src ptw -- --testmon

##@ Code Quality
format: ## Format code with Black and isort
	black src tests
	isort src tests

lint: ## Run linting with flake8 and mypy
	flake8 src tests
	mypy src

check: ## Run all code quality checks
	make format
	make lint
	make test

##@ Docker (Full Containerization)
docker-full: ## Run everything in Docker (alternative to local development)
	docker-compose -f docker-compose.full.yml up --build

docker-full-down: ## Stop full Docker setup
	docker-compose -f docker-compose.full.yml down -v

docker-build: ## Build Docker image
	docker build -t fastapi-vertical-slice .

##@ Utilities
clean: ## Clean temporary files
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	rm -rf build/ dist/ .coverage htmlcov/ .pytest_cache/ .mypy_cache/

logs: ## Show application logs (when running locally)
	tail -f logs/app.log

shell: ## Start IPython shell with app context
	PYTHONPATH=src ipython

##@ Production
build-prod: ## Build production Docker image
	docker build -f Dockerfile.prod -t fastapi-vertical-slice:prod .

health: ## Check application health
	curl -f http://localhost:8000/health || echo "‚ùå Application not responding"

##@ PyCharm Integration
pycharm-setup: ## Setup PyCharm environment
	python scripts/setup-pycharm.py
	@echo "‚úÖ PyCharm setup complete. Open the project in PyCharm."

pycharm-db-url: ## Show database URL for PyCharm connection
	@echo "PostgreSQL URL for PyCharm Database tool:"
	@echo "postgresql://postgres:postgres@localhost:5432/fastapi_app"

##@ Information
show-urls: ## Show important URLs
	@echo "üìã Development URLs:"
	@echo "   FastAPI App:     http://localhost:8000"
	@echo "   API Docs:        http://localhost:8000/docs"
	@echo "   ReDoc:           http://localhost:8000/redoc"
	@echo "   PgAdmin:         http://localhost:8080 (with --profile tools)"
	@echo ""
	@echo "üîß Database Connection:"
	@echo "   Host: localhost"
	@echo "   Port: 5432"
	@echo "   DB:   fastapi_app" 
	@echo "   User: postgres"
	@echo "   Pass: postgres"

status: ## Show services status
	@echo "üîç Docker Services Status:"
	@docker-compose -f docker-compose.services.yml ps 2>/dev/null || echo "   No services running"
	@echo ""
	@echo "üîç Application Status:"
	@curl -s http://localhost:8000/health > /dev/null && echo "   ‚úÖ FastAPI app is running" || echo "   ‚ùå FastAPI app is not responding" 